services:
  db:
    image: postgres:15-alpine
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS-postgres}
      PGUSER: ${DB_USER-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - stagingDB:/var/lib/postgresql/data

  backend:
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS-postgres}
      DB_USER: ${DB_USER-postgres}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
      NODE_ENV: ${NODE_ENV:-production}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://staging.0923-bleu-2.wns.wilders.dev/}
    stop_grace_period: 0s
    depends_on:
      db:
        condition: service_healthy
    image: hygichecker/hygi-checker-back

  frontend:
    environment:
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
    stop_grace_period: 0s
    image: hygichecker/hygi-checker-front

  gateway:
    stop_grace_period: 0s
    restart: always
    depends_on:
      - backend
    build:
      context: gateway
      dockerfile: Dockerfile.production
    ports:
      - ${GATEWAY_PORT-80}:80
    volumes:
      - ./logs:/var/log/nginx

volumes:
  stagingDB: